syntax = "proto3";

package com.sitewhere.grpc.model;

option java_outer_classname = "DeviceEventModel";

import "sitewhere-common.proto";

// #####################
// ### DEVICE EVENTS ###
// #####################

// Event index types.
enum GDeviceEventIndex {
	EVENT_INDEX_ASSIGNMENT = 0;
	EVENT_INDEX_CUSTOMER = 1;
	EVENT_INDEX_AREA = 2;
	EVENT_INDEX_ASSET = 3;
}

// Base fields for creating a device event.
message GDeviceEventCreateRequest {
	GOptionalString alternateId = 1;
	GOptionalString customerToken = 2;
	GOptionalString areaToken = 3;
	GOptionalString assetToken = 4;
	uint64 eventDate = 5;
	GOptionalBoolean updateState = 6;
	map<string, string> metadata = 7;
}

// Request data for creating device measurement.
message GDeviceMeasurementCreateRequest {
	string name = 1;
	string value = 2;
	GDeviceEventCreateRequest event = 3;
}

// Alert source.
enum GAlertSource {
	ALERT_SOURCE_DEVICE = 0;
	ALERT_SOURCE_SYSTEM = 1;
}

// Alert level.
enum GAlertLevel {
	ALERT_LEVEL_INFO = 0;
	ALERT_LEVEL_WARNING = 1;
	ALERT_LEVEL_ERROR = 2;
	ALERT_LEVEL_CRITICAL = 3;
}

// Request data for creating device alert.
message GDeviceAlertCreateRequest {
	GAlertSource source = 1;
	GAlertLevel level = 2;
	string type = 3;
	string alertMessage = 4;
	GDeviceEventCreateRequest event = 5;
}

// Request data for creating device location.
message GDeviceLocationCreateRequest {
	string latitude = 1;
	string longitude = 2;
	GOptionalString elevation = 3;
	GDeviceEventCreateRequest event = 4;
}

// Request data for invoking a device command.
message GDeviceCommandInvocationCreateRequest {
	GDeviceCommandInitiator initiator = 1;
	string initiatorId = 2;
	GDeviceCommandTarget target = 3;
	GOptionalString targetId = 4;
	string commandToken = 5;
	map<string, string> parameterValues = 6;
	GDeviceEventCreateRequest event = 8;
}

// Request data for a device command response.
message GDeviceCommandResponseCreateRequest {
	GUUID originatingEventId = 1;
	GUUID responseEventId = 2;
	GOptionalString response = 3;
	GDeviceEventCreateRequest event = 4;
}

// Request data for a device state change.
message GDeviceStateChangeCreateRequest {
	string attribute = 1;
	string type = 2;
	GOptionalString previousState = 3;
	GOptionalString newState = 4;
	GDeviceEventCreateRequest event = 5;
}

// Message that can contain any type of event create request.
message GAnyDeviceEventCreateRequest {
	oneof event {
		GDeviceMeasurementCreateRequest measurement = 1;
		GDeviceAlertCreateRequest alert = 2;
		GDeviceLocationCreateRequest location = 3;
		GDeviceCommandInvocationCreateRequest commandInvocation = 4;
		GDeviceCommandResponseCreateRequest commandResponse = 5;
		GDeviceStateChangeCreateRequest stateChange = 6;
	}
}

// Request for creating device event for an assignment.
message GDeviceAssignmentEventCreateRequest {
	GUUID deviceAssignmentId = 1;
	GAnyDeviceEventCreateRequest request = 2;
}

// Common device event information.
message GDeviceEvent {
	GUUID id = 1;
	GOptionalString alternateId = 2;
	GDeviceEventType eventType = 3;
	GUUID deviceId = 4;
	GUUID deviceAssignmentId = 5;
	GUUID customerId = 6;
	GUUID areaId = 7;
	GUUID assetId = 8;
	uint64 eventDate = 9;
	uint64 receivedDate = 10;
	map<string, string> metadata = 11;
}

// Measurements event.
message GDeviceMeasurement {
	string name = 1;
	string value = 2;
	GDeviceEvent event = 3;
}

// Alert event.
message GDeviceAlert {
	GAlertSource source = 1;
	GAlertLevel level = 2;
	string type = 3;
	string alertMessage = 4;
	GDeviceEvent event = 5;
}

// Location event.
message GDeviceLocation {
	string latitude = 1;
	string longitude = 2;
	GOptionalString elevation = 3;
	GDeviceEvent event = 4;
}

// Command invocation event.
message GDeviceCommandInvocation {
	GDeviceCommandInitiator initiator = 1;
	string initiatorId = 2;
	GDeviceCommandTarget target = 3;
	GOptionalString targetId = 4;
	GUUID deviceCommandId = 5;
	map<string, string> parameterValues = 6;
	GDeviceEvent event = 7;
}

// Command response event.
message GDeviceCommandResponse {
	GUUID originatingEventId = 1;
	GUUID responseEventId = 2;
	GOptionalString response = 3;
	GDeviceEvent event = 4;
}

// State change event.
message GDeviceStateChange {
	string attribute = 1;
	string type = 2;
	GOptionalString previousState = 3;
	GOptionalString newState = 4;
	GDeviceEvent event = 5;
}

// Message that can contain any type of event.
message GAnyDeviceEvent {
	oneof event {
		GDeviceMeasurement measurement = 1;
		GDeviceAlert alert = 2;
		GDeviceLocation location = 3;
		GDeviceCommandInvocation commandInvocation = 4;
		GDeviceCommandResponse commandResponse = 5;
		GDeviceStateChange stateChange = 6;
	}
}

// Criteria for searching device events.
message GDeviceEventSearchCriteria {
	GDateRangeSearchCriteria criteria = 1;
}

// Results for device events search.
message GDeviceEventSearchResults {
	int64 count = 1;
	repeated GAnyDeviceEvent events = 2;
}

// Results for device measurements search.
message GDeviceMeasurementSearchResults {
	int64 count = 1;
	repeated GDeviceMeasurement measurements = 2;
}

// Results for device alert search.
message GDeviceAlertSearchResults {
	int64 count = 1;
	repeated GDeviceAlert alerts = 2;
}

// Results for device alert search.
message GDeviceLocationSearchResults {
	int64 count = 1;
	repeated GDeviceLocation locations = 2;
}

// Results for device command invocation search.
message GDeviceCommandInvocationSearchResults {
	int64 count = 1;
	repeated GDeviceCommandInvocation invocations = 2;
}

// Results for device command response search.
message GDeviceCommandResponseSearchResults {
	int64 count = 1;
	repeated GDeviceCommandResponse responses = 2;
}

// Results for device state change search.
message GDeviceStateChangeSearchResults {
	int64 count = 1;
	repeated GDeviceStateChange stateChanges = 2;
}

// ####################
// ### BATCH EVENTS ###
// ####################

// Request data for a batch of device events.
message GDeviceEventBatchCreateRequest {
	string hardwareId = 1;
	repeated GDeviceMeasurementCreateRequest measurements = 2;
	repeated GDeviceAlertCreateRequest alerts = 3;
	repeated GDeviceLocationCreateRequest locations = 4;
}

// Response data for a batch event request.
message GDeviceEventBatchResponse {
	repeated GDeviceMeasurement measurements = 1;
	repeated GDeviceAlert alerts = 2;
	repeated GDeviceLocation locations = 3;
}

// ######################
// ### KAFKA PAYLOADS ###
// ######################

// Context information for a device event.
message GDeviceEventContext {
	GUUID deviceId = 1;
	GUUID deviceTypeId = 2;
	GUUID parentDeviceId = 3;
	GOptionalString deviceStatus = 4;
	map<string, string> deviceMetadata = 5;
	GDeviceAssignmentStatus assignmentStatus = 6;
	map<string, string> assignmentMetadata = 7;
}

// Decoded inbound event payload.
message GDecodedEventPayload {
	string sourceId = 1;
	string deviceToken = 2;
	com.sitewhere.grpc.model.GOptionalString originator = 3;
	com.sitewhere.grpc.model.GAnyDeviceEventCreateRequest event = 4;
}

// Pre-processed event payload.
message GPreprocessedEventPayload {
	string sourceId = 1;
	string deviceToken = 2;
	com.sitewhere.grpc.model.GOptionalString originator = 3;
	com.sitewhere.grpc.model.GUUID deviceId = 4;
	com.sitewhere.grpc.model.GUUID deviceAssignmentId = 5;
	com.sitewhere.grpc.model.GAnyDeviceEventCreateRequest event = 6;
}

// Enriched event payload.
message GEnrichedEventPayload {
	com.sitewhere.grpc.model.GDeviceEventContext context = 1;
	com.sitewhere.grpc.model.GAnyDeviceEvent event = 2;
}
