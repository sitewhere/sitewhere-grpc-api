syntax = "proto3";

package com.sitewhere.grpc.model;

option java_outer_classname = "DeviceModel";

import "sitewhere-common.proto";

// ####################
// ### DEVICE TYPES ###
// ####################

// Slot within a unit.
message GDeviceSlot {
	string name = 1;
	string path = 2;
	GEntityInformation entityInformation = 3;
}

// Unit within a schema.
message GDeviceUnit {
	string name = 1;
	string path = 2;
	repeated GDeviceUnit units = 3;
	repeated GDeviceSlot slots = 4;
	GEntityInformation entityInformation = 5;
}

// Device element schema.
message GDeviceElementSchema {
	repeated GDeviceUnit units = 1;
	repeated GDeviceSlot slots = 2;
	GEntityInformation entityInformation = 3;
}

// Request for creating a device type.
message GDeviceTypeCreateRequest {
	GOptionalString token = 1;
	GOptionalString name = 2;
	GOptionalString description = 3;
	GOptionalString imageUrl = 4;
	GDeviceContainerPolicy containerPolicy = 5;
	GOptionalString deviceElementSchemaToken = 6;
	map<string, string> metadata = 7;
	GBrandingInformation branding = 8;
}

// Criteria for searching device types.
message GDeviceTypeSearchCriteria {
	GPaging paging = 1;
}

// Results for device type search.
message GDeviceTypeSearchResults {
	uint64 count = 1;
	repeated GDeviceType deviceTypes = 2;
}

// Reference to a device type by token.
message GDeviceTypeReference {
	string token = 1;
}

// Device type.
message GDeviceType {
	string name = 1;
	string description = 2;
	string imageUrl = 3;
	GDeviceContainerPolicy containerPolicy = 4;
	GUUID deviceElementSchemaId = 5;
	GEntityInformation entityInformation = 6;
	GBrandingInformation branding = 7;
}

// #######################
// ### DEVICE COMMANDS ###
// #######################

// Device command parameter.
message GCommandParameter {
	string name = 1;
	GParameterType type = 2;
	bool required = 3;
}

// Request for creating a device command.
message GDeviceCommandCreateRequest {
	GOptionalString token = 1;
	GOptionalString deviceTypeToken = 2;
	GOptionalString namespace = 3;
	GOptionalString name = 4;
	GOptionalString description = 5;
	repeated GCommandParameter parameters = 6;
	map<string, string> metadata = 7;
}

// Criteria for searching device commands.
message GDeviceCommandSearchCriteria {
	GOptionalString deviceTypeToken = 1;
	GPaging paging = 2;
}

// Results for device command search.
message GDeviceCommandSearchResults {
	uint64 count = 1;
	repeated GDeviceCommand deviceCommands = 2;
}

// Device command.
message GDeviceCommand {
	GUUID deviceTypeId = 1;
	string namespace = 2;
	string name = 3;
	string description = 4;
	repeated GCommandParameter parameters = 5;
	GEntityInformation entityInformation = 6;
}

// #######################
// ### DEVICE STATUSES ###
// #######################

// Request for creating a device status.
message GDeviceStatusCreateRequest {
	GOptionalString token = 1;
	GOptionalString deviceTypeToken = 2;
	GOptionalString code = 3;
	GOptionalString name = 4;
	GOptionalString backgroundColor = 5;
	GOptionalString foregroundColor = 6;
	GOptionalString borderColor = 7;
	GOptionalString icon = 8;
	map<string, string> metadata = 9;
}

// Criteria for searching device statuses.
message GDeviceStatusSearchCriteria {
	GOptionalString deviceTypeToken = 1;
	GOptionalString code = 2;
	GPaging paging = 3;
}

// Results for device status search.
message GDeviceStatusSearchResults {
	uint64 count = 1;
	repeated GDeviceStatus deviceStatuses = 2;
}

// Device status.
message GDeviceStatus {
	GUUID deviceTypeId = 1;
	string code = 2;
	string name = 3;
	GOptionalString backgroundColor = 4;
	GOptionalString foregroundColor = 5;
	GOptionalString borderColor = 6;
	GOptionalString icon = 7;
	GEntityInformation entityInformation = 8;
}

// ###############
// ### DEVICES ###
// ###############

// Device element mapping.
message GDeviceElementMapping {
	string schemaPath = 1;
	string deviceToken = 2;
}

// Request for registering a device.
message GDeviceRegistrationRequest {
	GOptionalString token = 1;
	GOptionalString deviceTypeToken = 2;
	GOptionalString parentDeviceToken = 3;
	GOptionalString customerToken = 4;
	GOptionalString areaToken = 5;
	GOptionalString assetToken = 6;
	repeated GDeviceElementMapping deviceElementMappings = 7;
	GOptionalString comments = 8;
	GOptionalString status = 9;
	map<string, string> metadata = 10;
}

// Request for creating a device.
message GDeviceCreateRequest {
	GOptionalString token = 1;
	GOptionalString deviceTypeToken = 2;
	GOptionalString parentDeviceToken = 3;
	repeated GDeviceElementMapping deviceElementMappings = 4;
	GOptionalString comments = 5;
	GOptionalString status = 6;
	map<string, string> metadata = 7;
}

// Criteria for searching devices.
message GDeviceSearchCriteria {
	GDeviceTypeReference deviceType = 1;
	GOptionalBoolean excludeAssigned = 2;
	uint64 createdAfter = 3;
	uint64 createdBefore = 4;
	GPaging paging = 5;
}

// Results for device search.
message GDeviceSearchResults {
	uint64 count = 1;
	repeated GDevice devices = 2;
}

// Device.
message GDevice {
	GUUID deviceTypeId = 1;
	repeated GUUID activeAssignmentId = 2;
	GUUID parentDeviceId = 3;
	repeated GDeviceElementMapping deviceElementMappings = 4;
	GOptionalString comments = 5;
	GOptionalString status = 6;
	GEntityInformation entityInformation = 7;
}

// #####################
// ### DEVICE GROUPS ###
// #####################

// Request data for creating a device group element.
message GDeviceGroupElementCreateRequest {
	GOptionalString token = 1;
	GOptionalString deviceToken = 2;
	GOptionalString nestedGroupToken = 3;
	repeated string roles = 4;
	map<string, string> metadata = 5;
}

// Request data for creating a device group.
message GDeviceGroupCreateRequest {
	GOptionalString token = 1;
	GOptionalString name = 2;
	GOptionalString description = 3;
	GOptionalString imageUrl = 4;
	repeated string roles = 5;
	map<string, string> metadata = 6;
	GBrandingInformation branding = 7;
}

// Criteria for searching device group elements.
message GDeviceGroupElementsSearchCriteria {
	GPaging paging = 2;
}

// Results for device group elements search.
message GDeviceGroupElementsSearchResults {
	uint64 count = 1;
	repeated GDeviceGroupElement elements = 2;
}

// Criteria for searching device groups.
message GDeviceGroupSearchCriteria {
	GPaging paging = 1;
}

// Criteria for searching device groups.
message GDeviceGroupsWithRoleSearchCriteria {
	string role = 1;
	GPaging paging = 2;
}

// Results for device group search.
message GDeviceGroupSearchResults {
	uint64 count = 1;
	repeated GDeviceGroup deviceGroups = 2;
}

// Device group element.
message GDeviceGroupElement {
	GUUID groupId = 2;
	GUUID deviceId = 3;
	GUUID nestedGroupId = 4;
	repeated string roles = 5;
	GEntityInformation entityInformation = 6;
}

// Device group.
message GDeviceGroup {
	string name = 1;
	string description = 2;
	string imageUrl = 3;
	repeated string roles = 4;
	GEntityInformation entityInformation = 5;
	GBrandingInformation branding = 6;
}

// ##########################
// ### DEVICE ASSIGNMENTS ###
// ##########################

// Request data for creating a device assignment.
message GDeviceAssignmentCreateRequest {
	GOptionalString token = 1;
	GOptionalString deviceToken = 2;
	GOptionalString customerToken = 3;
	GOptionalString areaToken = 4;
	GOptionalString assetToken = 5;
	GDeviceAssignmentStatus status = 6;
	map<string, string> metadata = 7;
}

// Criteria for searching device assignments.
message GDeviceAssignmentSearchCriteria {
	repeated GDeviceAssignmentStatus status = 1;
	repeated string deviceTokens = 2;
	repeated string deviceTypeTokens = 3;
	repeated string customerTokens = 4;
	repeated string areaTokens = 5;
	repeated string assetTokens = 6;
	GPaging paging = 7;
}

// Results for device assignment search.
message GDeviceAssignmentSearchResults {
	int64 count = 1;
	repeated GDeviceAssignment assignments = 2;
}

// Device assignment.
message GDeviceAssignment {
	GUUID deviceId = 1;
	GUUID deviceTypeId = 2;
	GUUID customerId = 3;
	GUUID areaId = 4;
	GUUID assetId = 5;
	GDeviceAssignmentStatus status = 6;
	uint64 activeDate = 7;
	uint64 releasedDate = 8;
	GEntityInformation entityInformation = 9;
}

// #######################
// ### SUMMARY RECORDS ###
// #######################

// Device assignment summary.
message GDeviceAssignmentSummary {
	GUUID customerId = 1;
	GOptionalString customerName = 2;
	GOptionalString customerImageUrl = 3;
	GUUID areaId = 4;
	GOptionalString areaName = 5;
	GOptionalString areaImageUrl = 6;
	GUUID assetId = 7;
	GOptionalString assetName = 8;
	GOptionalString assetImageUrl = 9;
	GDeviceAssignmentStatus status = 10;
	uint64 activeDate = 11;
	uint64 releasedDate = 12;
	GEntityInformation entityInformation = 13;
}

// Device summary.
message GDeviceSummary {
	GUUID deviceTypeId = 1;
	string deviceTypeName = 2;
	GOptionalString deviceTypeImageUrl = 3;
	GUUID parentDeviceId = 4;
	GOptionalString comments = 5;
	GOptionalString status = 6;
	repeated GDeviceAssignmentSummary deviceAssigmentSummaries = 7;
	GEntityInformation entityInformation = 8;
}

// Results for device summary search.
message GDeviceSummarySearchResults {
	uint64 count = 1;
	repeated GDeviceSummary deviceSummaries = 2;
}

// ######################
// ### CUSTOMER TYPES ###
// ######################

// Request data for creating a customer type.
message GCustomerTypeCreateRequest {
	GOptionalString token = 1;
	GOptionalString name = 2;
	GOptionalString description = 3;
	GOptionalString icon = 4;
	repeated string containedCustomerTypeTokens = 5;
	map<string, string> metadata = 6;
	GBrandingInformation branding = 7;
}

// Criteria for searching customer types.
message GCustomerTypeSearchCriteria {
	GPaging paging = 1;
}

// Results for area type search.
message GCustomerTypeSearchResults {
	int64 count = 1;
	repeated GCustomerType customerTypes = 2;
}

// Customer type.
message GCustomerType {
	string name = 1;
	string description = 2;
	string icon = 3;
	repeated GUUID containedCustomerTypeIds = 4;
	GEntityInformation entityInformation = 5;
	GBrandingInformation branding = 6;
}

// #################
// ### CUSTOMERS ###
// #################

// Request data for creating a customer.
message GCustomerCreateRequest {
	GOptionalString token = 1;
	GOptionalString customerTypeToken = 2;
	GOptionalString parentCustomerToken = 3;
	GOptionalString name = 4;
	GOptionalString description = 5;
	GOptionalString imageUrl = 6;
	map<string, string> metadata = 8;
	GBrandingInformation branding = 9;
}

// Criteria for searching customers.
message GCustomerSearchCriteria {
	GOptionalBoolean rootOnly = 1;
	GOptionalString parentCustomerToken = 2;
	GOptionalString customerTypeToken = 3;
	GPaging paging = 4;
}

// Results for customer search.
message GCustomerSearchResults {
	int64 count = 1;
	repeated GCustomer customers = 2;
}

// Customer.
message GCustomer {
	GUUID customerTypeId = 1;
	GUUID parentCustomerId = 2;
	string name = 3;
	string description = 4;
	string imageUrl = 5;
	GEntityInformation entityInformation = 6;
	GBrandingInformation branding = 7;
}

// ##################
// ### AREA TYPES ###
// ##################

// Request data for creating an area type.
message GAreaTypeCreateRequest {
	GOptionalString token = 1;
	string name = 2;
	string description = 3;
	string icon = 4;
	repeated string containedAreaTypeTokens = 5;
	map<string, string> metadata = 6;
	GBrandingInformation branding = 7;
}

// Criteria for searching area types.
message GAreaTypeSearchCriteria {
	GPaging paging = 1;
}

// Results for area type search.
message GAreaTypeSearchResults {
	int64 count = 1;
	repeated GAreaType areaTypes = 2;
}

// Area type.
message GAreaType {
	string name = 1;
	string description = 2;
	string icon = 3;
	repeated GUUID containedAreaTypeIds = 4;
	GEntityInformation entityInformation = 5;
	GBrandingInformation branding = 6;
}

// #############
// ### AREAS ###
// #############

// Request data for creating an area.
message GAreaCreateRequest {
	GOptionalString token = 1;
	GOptionalString areaTypeToken = 2;
	GOptionalString parentAreaToken = 3;
	GOptionalString name = 4;
	GOptionalString description = 5;
	GOptionalString imageUrl = 6;
	repeated GLocation bounds = 7;
	map<string, string> metadata = 8;
	GBrandingInformation branding = 9;
}

// Criteria for searching areas.
message GAreaSearchCriteria {
	GOptionalBoolean rootOnly = 1;
	GOptionalString parentAreaToken = 2;
	GOptionalString areaTypeToken = 3;
	GPaging paging = 4;
}

// Results for area search.
message GAreaSearchResults {
	int64 count = 1;
	repeated GArea areas = 2;
}

// Area.
message GArea {
	GUUID areaTypeId = 1;
	GUUID parentAreaId = 2;
	string name = 3;
	string description = 4;
	string imageUrl = 5;
	repeated GLocation bounds = 6;
	GEntityInformation entityInformation = 7;
	GBrandingInformation branding = 8;
}

// #############
// ### ZONES ###
// #############

// Request data for creating a zone.
message GZoneCreateRequest {
	GOptionalString token = 1;
	GOptionalString areaToken = 2;
	GOptionalString name = 3;
	repeated GLocation bounds = 4;
	GOptionalString borderColor = 5;
	GOptionalDouble borderOpacity = 6;
	GOptionalString fillColor = 7;
	GOptionalDouble fillOpacity = 8;
	map<string, string> metadata = 9;
}

// Criteria for searching zones.
message GZoneSearchCriteria {
	GOptionalString areaToken = 1;
	GPaging paging = 2;
}

// Results for zone search.
message GZoneSearchResults {
	int64 count = 1;
	repeated GZone zones = 2;
}

// Zone.
message GZone {
	GUUID areaId = 1;
	string name = 2;
	repeated GLocation bounds = 3;
	string borderColor = 4;
	double borderOpacity = 5;
	string fillColor = 6;
	double fillOpacity = 7;
	GEntityInformation entityInformation = 8;
}

// #####################
// ### DEVICE ALARMS ###
// #####################

// Request data for creating a device alarm.
message GDeviceAlarmCreateRequest {
	GOptionalString deviceAssignmentToken = 1;
	GOptionalString alarmMessage = 2;
	GUUID triggeringEventId = 3;
	GDeviceAlarmState state = 4;
	uint64 triggeredDate = 5;
	uint64 acknowledgedDate = 6;
	uint64 resolvedDate = 7;
	map<string, string> metadata = 8;
}

// Criteria for searching device alarms.
message GDeviceAlarmSearchCriteria {
	GUUID deviceId = 1;
	GUUID deviceAssignmentId = 2;
	GUUID customerId = 3;
	GUUID areaId = 4;
	GUUID assetId = 5;
	GUUID triggeringEventId = 6;
	GDeviceAlarmState state = 7;
	int32 pageNumber = 8;
	int32 pageSize = 9;
}

// Results for device alarm search.
message GDeviceAlarmSearchResults {
	int64 count = 1;
	repeated GDeviceAlarm alarms = 2;
}

// Device alarm.
message GDeviceAlarm {
	GUUID id = 1;
	GUUID deviceId = 2;
	GUUID deviceAssignmentId = 3;
	GUUID customerId = 4;
	GUUID areaId = 5;
	GUUID assetId = 6;
	GOptionalString alarmMessage = 7;
	GUUID triggeringEventId = 8;
	GDeviceAlarmState state = 9;
	uint64 triggeredDate = 10;
	uint64 acknowledgedDate = 11;
	uint64 resolvedDate = 12;
	map<string, string> metadata = 13;
}

// #######################
// ### TREE STRUCTURES ###
// #######################

message GTreeNode {
	string token = 1;
	string name = 2;
	GOptionalString icon = 3;
	repeated GTreeNode children = 4;
}

// ######################
// ### KAFKA PAYLOADS ###
// ######################

// Device registration payload.
message GDeviceRegistationPayload {
	string sourceId = 1;
	string deviceToken = 2;
	com.sitewhere.grpc.model.GOptionalString originator = 3;
	com.sitewhere.grpc.model.GDeviceRegistrationRequest registration = 4;
}
