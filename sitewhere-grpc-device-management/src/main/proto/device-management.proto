syntax = "proto3";

package com.sitewhere.grpc.service;

option java_multiple_files = true;
option java_package = "com.sitewhere.grpc.service";
option java_outer_classname = "DeviceServices";

import "device-model.proto";
import "sitewhere-common.proto";

// Device management APIs.
service DeviceManagement {

	// ######################
	// ### CUSTOMER TYPES ###
	// ######################
	
	// Create a new customer type.
	rpc CreateCustomerType (GCreateCustomerTypeRequest) returns (GCreateCustomerTypeResponse) {}
		
	// Get customer type by id.
	rpc GetCustomerType (GGetCustomerTypeRequest) returns (GGetCustomerTypeResponse) {}
	
	// Get customer type by unique token.
	rpc GetCustomerTypeByToken (GGetCustomerTypeByTokenRequest) returns (GGetCustomerTypeByTokenResponse) {}
	
	// Update an existing customer type.
	rpc UpdateCustomerType (GUpdateCustomerTypeRequest) returns (GUpdateCustomerTypeResponse) {}
	
	// List customer types that meet criteria.
	rpc ListCustomerTypes (GListCustomerTypesRequest) returns (GListCustomerTypesResponse) {}
		
	// List customer types that may be contained in a given customer type.
	rpc GetContainedCustomerTypes (GGetContainedCustomerTypesRequest) returns (GGetContainedCustomerTypesResponse) {}
	
	// Delete an existing customer type.
	rpc DeleteCustomerType (GDeleteCustomerTypeRequest) returns (GDeleteCustomerTypeResponse) {}

	// #################
	// ### CUSTOMERS ###
	// #################
	
	// Create a new customer.
	rpc CreateCustomer (GCreateCustomerRequest) returns (GCreateCustomerResponse) {}
		
	// Get customer by id.
	rpc GetCustomer (GGetCustomerRequest) returns (GGetCustomerResponse) {}
	
	// Get customer by unique token.
	rpc GetCustomerByToken (GGetCustomerByTokenRequest) returns (GGetCustomerByTokenResponse) {}
	
	// Get children of a customer.
	rpc GetCustomerChildren (GGetCustomerChildrenRequest) returns (GGetCustomerChildrenResponse) {}
	
	// Update an existing customer.
	rpc UpdateCustomer (GUpdateCustomerRequest) returns (GUpdateCustomerResponse) {}
	
	// List customers that meet criteria.
	rpc ListCustomers (GListCustomersRequest) returns (GListCustomersResponse) {}
		
	// Get tree representation of customers hierarchy.
	rpc GetCustomersTree (GGetCustomersTreeRequest) returns (GGetCustomersTreeResponse) {}
	
	// Delete an existing customer.
	rpc DeleteCustomer (GDeleteCustomerRequest) returns (GDeleteCustomerResponse) {}

	// ##################
	// ### AREA TYPES ###
	// ##################
	
	// Create a new area type.
	rpc CreateAreaType (GCreateAreaTypeRequest) returns (GCreateAreaTypeResponse) {}
		
	// Get area type by id.
	rpc GetAreaType (GGetAreaTypeRequest) returns (GGetAreaTypeResponse) {}
	
	// Get area type by unique token.
	rpc GetAreaTypeByToken (GGetAreaTypeByTokenRequest) returns (GGetAreaTypeByTokenResponse) {}
	
	// Update an existing area type.
	rpc UpdateAreaType (GUpdateAreaTypeRequest) returns (GUpdateAreaTypeResponse) {}
	
	// List area types that meet criteria.
	rpc ListAreaTypes (GListAreaTypesRequest) returns (GListAreaTypesResponse) {}
		
	// List area types that may be contained in a given area type.
	rpc GetContainedAreaTypes (GGetContainedAreaTypesRequest) returns (GGetContainedAreaTypesResponse) {}
	
	// Delete an existing area type.
	rpc DeleteAreaType (GDeleteAreaTypeRequest) returns (GDeleteAreaTypeResponse) {}

	// #############
	// ### AREAS ###
	// #############
	
	// Create a new area.
	rpc CreateArea (GCreateAreaRequest) returns (GCreateAreaResponse) {}
		
	// Get area by id.
	rpc GetArea (GGetAreaRequest) returns (GGetAreaResponse) {}
	
	// Get area by unique token.
	rpc GetAreaByToken (GGetAreaByTokenRequest) returns (GGetAreaByTokenResponse) {}
	
	// Get children of an area.
	rpc GetAreaChildren (GGetAreaChildrenRequest) returns (GGetAreaChildrenResponse) {}
	
	// Update an existing area.
	rpc UpdateArea (GUpdateAreaRequest) returns (GUpdateAreaResponse) {}
	
	// List areas that meet criteria.
	rpc ListAreas (GListAreasRequest) returns (GListAreasResponse) {}
			
	// Get tree representation of areas hierarchy.
	rpc GetAreasTree (GGetAreasTreeRequest) returns (GGetAreasTreeResponse) {}
	
	// Delete an existing area.
	rpc DeleteArea (GDeleteAreaRequest) returns (GDeleteAreaResponse) {}
	
	// #############
	// ### ZONES ###
	// #############
	
	// Create a new zone.
	rpc CreateZone (GCreateZoneRequest) returns (GCreateZoneResponse) {}
	
	// Get zone by id.
	rpc GetZone (GGetZoneRequest) returns (GGetZoneResponse) {}
	
	// Get zone by unique token.
	rpc GetZoneByToken (GGetZoneByTokenRequest) returns (GGetZoneByTokenResponse) {}
	
	// Update an existing zone.
	rpc UpdateZone (GUpdateZoneRequest) returns (GUpdateZoneResponse) {}
	
	// List zones that meet criteria.
	rpc ListZones (GListZonesRequest) returns (GListZonesResponse) {}
	
	// Delete an existing zone.
	rpc DeleteZone (GDeleteZoneRequest) returns (GDeleteZoneResponse) {}

	// ####################
	// ### DEVICE TYPES ###
	// ####################
	
	// Create a new device type.
	rpc CreateDeviceType (GCreateDeviceTypeRequest) returns (GCreateDeviceTypeResponse) {}

	// Get device type by id.
	rpc GetDeviceType (GGetDeviceTypeRequest) returns (GGetDeviceTypeResponse) {}

	// Get device type by unique token.
	rpc GetDeviceTypeByToken (GGetDeviceTypeByTokenRequest) returns (GGetDeviceTypeByTokenResponse) {}

	// Update an existing device type.
	rpc UpdateDeviceType (GUpdateDeviceTypeRequest) returns (GUpdateDeviceTypeResponse) {}

	// List device type that meet criteria.
	rpc ListDeviceTypes (GListDeviceTypesRequest) returns (GListDeviceTypesResponse) {}

	// Delete an existing device type.
	rpc DeleteDeviceType (GDeleteDeviceTypeRequest) returns (GDeleteDeviceTypeResponse) {}

	// #######################
	// ### DEVICE COMMANDS ###
	// #######################
	
	// Create a new device command.
	rpc CreateDeviceCommand (GCreateDeviceCommandRequest) returns (GCreateDeviceCommandResponse) {}
	
	// Get device command by id.
	rpc GetDeviceCommand (GGetDeviceCommandRequest) returns (GGetDeviceCommandResponse) {}
	
	// Get device command by unique token.
	rpc GetDeviceCommandByToken (GGetDeviceCommandByTokenRequest) returns (GGetDeviceCommandByTokenResponse) {}
	
	// Update an existing device command.
	rpc UpdateDeviceCommand (GUpdateDeviceCommandRequest) returns (GUpdateDeviceCommandResponse) {}

	// List device commands that meet criteria.
	rpc ListDeviceCommands (GListDeviceCommandsRequest) returns (GListDeviceCommandsResponse) {}

	// Delete an existing device command.
	rpc DeleteDeviceCommand (GDeleteDeviceCommandRequest) returns (GDeleteDeviceCommandResponse) {}

	// #######################
	// ### DEVICE STATUSES ###
	// #######################
	
	// Create a new device status.
	rpc CreateDeviceStatus (GCreateDeviceStatusRequest) returns (GCreateDeviceStatusResponse) {}
	
	// Get device status.
	rpc GetDeviceStatus (GGetDeviceStatusRequest) returns (GGetDeviceStatusResponse) {}
	
	// Get device status by token.
	rpc GetDeviceStatusByToken (GGetDeviceStatusByTokenRequest) returns (GGetDeviceStatusByTokenResponse) {}
	
	// Update an existing device status.
	rpc UpdateDeviceStatus (GUpdateDeviceStatusRequest) returns (GUpdateDeviceStatusResponse) {}

	// List device statuses that meet criteria.
	rpc ListDeviceStatuses (GListDeviceStatusesRequest) returns (GListDeviceStatusesResponse) {}

	// Delete an existing device status.
	rpc DeleteDeviceStatus (GDeleteDeviceStatusRequest) returns (GDeleteDeviceStatusResponse) {}

	// ###############
	// ### DEVICES ###
	// ###############
	
	// Create a new device.
	rpc CreateDevice (GCreateDeviceRequest) returns (GCreateDeviceResponse) {}
		
	// Get a device id.
	rpc GetDevice (GGetDeviceRequest) returns (GGetDeviceResponse) {}
	
	// Get a device by unique hardware id.
	rpc GetDeviceByToken (GGetDeviceByTokenRequest) returns (GGetDeviceByTokenResponse) {}
	
	// Update an existing device.
	rpc UpdateDevice (GUpdateDeviceRequest) returns (GUpdateDeviceResponse) {}

	// List devices that meet criteria.
	rpc ListDevices (GListDevicesRequest) returns (GListDevicesResponse) {}

	// Get summaries for devices that meet criteria.
	rpc ListDeviceSummaries (GListDeviceSummariesRequest) returns (GListDeviceSummariesResponse) {}

	// Create a device element mapping.
	rpc CreateDeviceElementMapping (GCreateDeviceElementMappingRequest) returns (GCreateDeviceElementMappingResponse) {}

	// Delete a device element mapping.
	rpc DeleteDeviceElementMapping (GDeleteDeviceElementMappingRequest) returns (GDeleteDeviceElementMappingResponse) {}

	// Delete an existing device.
	rpc DeleteDevice (GDeleteDeviceRequest) returns (GDeleteDeviceResponse) {}
	
	// #####################
	// ### DEVICE GROUPS ###
	// #####################
	
	// Create a new device group.
	rpc CreateDeviceGroup (GCreateDeviceGroupRequest) returns (GCreateDeviceGroupResponse) {}
	
	// Get a device group by id.
	rpc GetDeviceGroup (GGetDeviceGroupRequest) returns (GGetDeviceGroupResponse) {}
	
	// Get a device group by unique token.
	rpc GetDeviceGroupByToken (GGetDeviceGroupByTokenRequest) returns (GGetDeviceGroupByTokenResponse) {}
	
	// Update an existing device group.
	rpc UpdateDeviceGroup (GUpdateDeviceGroupRequest) returns (GUpdateDeviceGroupResponse) {}

	// List device groups that meet criteria.
	rpc ListDeviceGroups (GListDeviceGroupsRequest) returns (GListDeviceGroupsResponse) {}

	// List device groups with a role that meet criteria.
	rpc ListDeviceGroupsWithRole (GListDeviceGroupsWithRoleRequest) returns (GListDeviceGroupsWithRoleResponse) {}

	// Delete an existing device group.
	rpc DeleteDeviceGroup (GDeleteDeviceGroupRequest) returns (GDeleteDeviceGroupResponse) {}

	// Add elements to an existing device group.
	rpc AddDeviceGroupElements (GAddDeviceGroupElementsRequest) returns (GAddDeviceGroupElementsResponse) {}

	// Remove elements from an existing device group.
	rpc RemoveDeviceGroupElements (GRemoveDeviceGroupElementsRequest) returns (GRemoveDeviceGroupElementsResponse) {}

	// List elements from an existing device group.
	rpc ListDeviceGroupElements (GListDeviceGroupElementsRequest) returns (GListDeviceGroupElementsResponse) {}

	// ##########################
	// ### DEVICE ASSIGNMENTS ###
	// ##########################
	
	// Create a new device assignment.
	rpc CreateDeviceAssignment (GCreateDeviceAssignmentRequest) returns (GCreateDeviceAssignmentResponse) {}
		
	// Get a device assignment by id.
	rpc GetDeviceAssignment (GGetDeviceAssignmentRequest) returns (GGetDeviceAssignmentResponse) {}
	
	// Get a device assignment by unique token.
	rpc GetDeviceAssignmentByToken (GGetDeviceAssignmentByTokenRequest) returns (GGetDeviceAssignmentByTokenResponse) {}
	
	// Get active assignments for a device.
	rpc GetActiveAssignmentsForDevice (GGetActiveAssignmentsForDeviceRequest) returns (GGetActiveAssignmentsForDeviceResponse) {}

	// Delete an existing device assignment.
	rpc DeleteDeviceAssignment (GDeleteDeviceAssignmentRequest) returns (GDeleteDeviceAssignmentResponse) {}
	
	// Update an existing device assignment.
	rpc UpdateDeviceAssignment (GUpdateDeviceAssignmentRequest) returns (GUpdateDeviceAssignmentResponse) {}
		
	// List device assignments that match criteria.
	rpc ListDeviceAssignments (GListDeviceAssignmentsRequest) returns (GListDeviceAssignmentsResponse) {}
	
	// End a device assignment.
	rpc EndDeviceAssignment (GEndDeviceAssignmentRequest) returns (GEndDeviceAssignmentResponse) {}

	// #####################
	// ### DEVICE ALARMS ###
	// #####################
	
	// Create a new device alarm.
	rpc CreateDeviceAlarm (GCreateDeviceAlarmRequest) returns (GCreateDeviceAlarmResponse) {}
	
	// Get device alarm.
	rpc GetDeviceAlarm (GGetDeviceAlarmRequest) returns (GGetDeviceAlarmResponse) {}
	
	// Update an existing device alarm.
	rpc UpdateDeviceAlarm (GUpdateDeviceAlarmRequest) returns (GUpdateDeviceAlarmResponse) {}

	// Search for device alarms that meet criteria.
	rpc SearchDeviceAlarms (GSearchDeviceAlarmsRequest) returns (GSearchDeviceAlarmsResponse) {}

	// Delete an existing device alarm.
	rpc DeleteDeviceAlarm (GDeleteDeviceAlarmRequest) returns (GDeleteDeviceAlarmResponse) {}
}

// ######################
// ### CUSTOMER TYPES ###
// ######################

// Request for creating a customer type.
message GCreateCustomerTypeRequest {
	com.sitewhere.grpc.model.GCustomerTypeCreateRequest request = 1;
}

// Response from creating a customer type.
message GCreateCustomerTypeResponse {
	com.sitewhere.grpc.model.GCustomerType customerType = 1;
}
	
// Request for getting a customer type by id.
message GGetCustomerTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting an area type by id.
message GGetCustomerTypeResponse {
	com.sitewhere.grpc.model.GCustomerType customerType = 1;
}
	
// Request for getting a customer type by token.
message GGetCustomerTypeByTokenRequest {
	string token = 1;
}
	
// Response for getting a customer type by token.
message GGetCustomerTypeByTokenResponse {
	com.sitewhere.grpc.model.GCustomerType customerType = 1;
}
	
// Request for updating an existing customer type.
message GUpdateCustomerTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GCustomerTypeCreateRequest request = 2;
}
	
// Response for updating an existing customer type.
message GUpdateCustomerTypeResponse {
	com.sitewhere.grpc.model.GCustomerType customerType = 1;
}
	
// Request for listing customer types that meet criteria.
message GListCustomerTypesRequest {
	com.sitewhere.grpc.model.GCustomerTypeSearchCriteria criteria = 1;
}
	
// Response for listing customer types that meet criteria.
message GListCustomerTypesResponse {
	com.sitewhere.grpc.model.GCustomerTypeSearchResults results = 1;
}
		
// Request for getting customer types which may be contained in a customer type.
message GGetContainedCustomerTypesRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting customer types which may be contained in a customer type.
message GGetContainedCustomerTypesResponse {
	repeated com.sitewhere.grpc.model.GCustomerType customerTypes = 1;
}
	
// Request for deleting a customer type.
message GDeleteCustomerTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a customer type.
message GDeleteCustomerTypeResponse {
	com.sitewhere.grpc.model.GCustomerType customerType = 1;
}

// #################
// ### CUSTOMERS ###
// #################

// Request for creating a customer.
message GCreateCustomerRequest {
	com.sitewhere.grpc.model.GCustomerCreateRequest request = 1;
}

// Response from creating a customer.
message GCreateCustomerResponse {
	com.sitewhere.grpc.model.GCustomer customer = 1;
}
	
// Request for getting a customer by id.
message GGetCustomerRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a customer by id.
message GGetCustomerResponse {
	com.sitewhere.grpc.model.GCustomer customer = 1;
}
	
// Request for getting a customer by token.
message GGetCustomerByTokenRequest {
	string token = 1;
}
	
// Response for getting a customer by token.
message GGetCustomerByTokenResponse {
	com.sitewhere.grpc.model.GCustomer customer = 1;
}

// Request for getting customer children.
message GGetCustomerChildrenRequest {
	string token = 1;
}

// Response for getting customer children.
message GGetCustomerChildrenResponse {
	repeated com.sitewhere.grpc.model.GCustomer customers = 1;
}
	
// Request for updating an existing customer.
message GUpdateCustomerRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GCustomerCreateRequest request = 2;
}
	
// Response for updating an existing customer.
message GUpdateCustomerResponse {
	com.sitewhere.grpc.model.GCustomer customer = 1;
}
	
// Request for listing customers that meet criteria.
message GListCustomersRequest {
	com.sitewhere.grpc.model.GCustomerSearchCriteria criteria = 1;
}
	
// Response for listing customers that meet criteria.
message GListCustomersResponse {
	com.sitewhere.grpc.model.GCustomerSearchResults results = 1;
}
			
// Request for getting tree representation of customers hierarchy.
message GGetCustomersTreeRequest {
}
	
// Response for getting tree representation of customers hierarchy.
message GGetCustomersTreeResponse {
	repeated com.sitewhere.grpc.model.GTreeNode customers = 1;
}
	
// Request for deleting a customer.
message GDeleteCustomerRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a customer.
message GDeleteCustomerResponse {
	com.sitewhere.grpc.model.GCustomer customer = 1;
}

// ##################
// ### AREA TYPES ###
// ##################

// Request for creating an area type.
message GCreateAreaTypeRequest {
	com.sitewhere.grpc.model.GAreaTypeCreateRequest request = 1;
}

// Response from creating an area type.
message GCreateAreaTypeResponse {
	com.sitewhere.grpc.model.GAreaType areaType = 1;
}
	
// Request for getting an area type by id.
message GGetAreaTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting an area type by id.
message GGetAreaTypeResponse {
	com.sitewhere.grpc.model.GAreaType areaType = 1;
}
	
// Request for getting an area type by token.
message GGetAreaTypeByTokenRequest {
	string token = 1;
}
	
// Response for getting an area type by token.
message GGetAreaTypeByTokenResponse {
	com.sitewhere.grpc.model.GAreaType areaType = 1;
}
	
// Request for updating an existing area type.
message GUpdateAreaTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GAreaTypeCreateRequest request = 2;
}
	
// Response for updating an existing area type.
message GUpdateAreaTypeResponse {
	com.sitewhere.grpc.model.GAreaType areaType = 1;
}
	
// Request for listing area types that meet criteria.
message GListAreaTypesRequest {
	com.sitewhere.grpc.model.GAreaTypeSearchCriteria criteria = 1;
}
	
// Response for listing area types that meet criteria.
message GListAreaTypesResponse {
	com.sitewhere.grpc.model.GAreaTypeSearchResults results = 1;
}
		
// Request for getting area types which may be contained in an area type.
message GGetContainedAreaTypesRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting area types which may be contained in an area type.
message GGetContainedAreaTypesResponse {
	repeated com.sitewhere.grpc.model.GAreaType areaTypes = 1;
}
	
// Request for deleting an area type.
message GDeleteAreaTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting an area type.
message GDeleteAreaTypeResponse {
	com.sitewhere.grpc.model.GAreaType areaType = 1;
}

// #############
// ### AREAS ###
// #############

// Request for creating an area.
message GCreateAreaRequest {
	com.sitewhere.grpc.model.GAreaCreateRequest request = 1;
}

// Response from creating an area.
message GCreateAreaResponse {
	com.sitewhere.grpc.model.GArea area = 1;
}
	
// Request for getting an area by id.
message GGetAreaRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting an area by id.
message GGetAreaResponse {
	com.sitewhere.grpc.model.GArea area = 1;
}
	
// Request for getting an area by token.
message GGetAreaByTokenRequest {
	string token = 1;
}
	
// Response for getting an area by token.
message GGetAreaByTokenResponse {
	com.sitewhere.grpc.model.GArea area = 1;
}

// Request for getting area children.
message GGetAreaChildrenRequest {
	string token = 1;
}

// Response for getting area children.
message GGetAreaChildrenResponse {
	repeated com.sitewhere.grpc.model.GArea areas = 1;
}
	
// Request for updating an existing area.
message GUpdateAreaRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GAreaCreateRequest request = 2;
}
	
// Response for updating an existing area.
message GUpdateAreaResponse {
	com.sitewhere.grpc.model.GArea area = 1;
}
	
// Request for listing areas that meet criteria.
message GListAreasRequest {
	com.sitewhere.grpc.model.GAreaSearchCriteria criteria = 1;
}
	
// Response for listing areas that meet criteria.
message GListAreasResponse {
	com.sitewhere.grpc.model.GAreaSearchResults results = 1;
}
		
// Request for getting tree representation of areas hierarchy.
message GGetAreasTreeRequest {
}
	
// Response for getting tree representation of areas hierarchy.
message GGetAreasTreeResponse {
	repeated com.sitewhere.grpc.model.GTreeNode areas = 1;
}
	
// Request for deleting an area.
message GDeleteAreaRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting an area.
message GDeleteAreaResponse {
	com.sitewhere.grpc.model.GArea area = 1;
}

// #############
// ### ZONES ###
// #############

// Request for creating a zone.
message GCreateZoneRequest {
	com.sitewhere.grpc.model.GZoneCreateRequest request = 1;
}

// Response from creating a zone.
message GCreateZoneResponse {
	com.sitewhere.grpc.model.GZone zone = 1;
}
	
// Request for getting a zone by id.
message GGetZoneRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a zone by id.
message GGetZoneResponse {
	com.sitewhere.grpc.model.GZone zone = 1;
}
	
// Request for getting a zone by token.
message GGetZoneByTokenRequest {
	string token = 1;
}
	
// Response for getting a zone by token.
message GGetZoneByTokenResponse {
	com.sitewhere.grpc.model.GZone zone = 1;
}
	
// Request for updating an existing zone.
message GUpdateZoneRequest {
	com.sitewhere.grpc.model.GUUID zoneId = 1;
	com.sitewhere.grpc.model.GZoneCreateRequest request = 2;
}
	
// Response for updating an existing zone.
message GUpdateZoneResponse {
	com.sitewhere.grpc.model.GZone zone = 1;
}
	
// Request for listing zones that meet criteria.
message GListZonesRequest {
	com.sitewhere.grpc.model.GZoneSearchCriteria criteria = 1;
}
	
// Response for listing zones that meet criteria.
message GListZonesResponse {
	com.sitewhere.grpc.model.GZoneSearchResults results = 1;
}
	
// Request for deleting a zone.
message GDeleteZoneRequest {
	com.sitewhere.grpc.model.GUUID id = 2;
}
	
// Response for deleting a zone.
message GDeleteZoneResponse {
	com.sitewhere.grpc.model.GZone zone = 1;
}

// ####################
// ### DEVICE TYPES ###
// ####################
	
// Request for creating a device type.
message GCreateDeviceTypeRequest {
	com.sitewhere.grpc.model.GDeviceTypeCreateRequest request = 1;
}

// Response from creating a device type.
message GCreateDeviceTypeResponse {
	com.sitewhere.grpc.model.GDeviceType deviceType = 1;
}
	
// Request for getting a device type by id.
message GGetDeviceTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a device type by id.
message GGetDeviceTypeResponse {
	com.sitewhere.grpc.model.GDeviceType deviceType = 1;
}
	
// Request for getting a device type by token.
message GGetDeviceTypeByTokenRequest {
	string token = 1;
}
	
// Response for getting a device type by token.
message GGetDeviceTypeByTokenResponse {
	com.sitewhere.grpc.model.GDeviceType deviceType = 1;
}
	
// Request for updating an existing device type.
message GUpdateDeviceTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GDeviceTypeCreateRequest request = 2;
}
	
// Response for updating an existing device type.
message GUpdateDeviceTypeResponse {
	com.sitewhere.grpc.model.GDeviceType deviceType = 1;
}
	
// Request for listing device type that meet criteria.
message GListDeviceTypesRequest {
	com.sitewhere.grpc.model.GDeviceTypeSearchCriteria criteria = 1;
}
	
// Response for listing device type that meet criteria.
message GListDeviceTypesResponse {
	com.sitewhere.grpc.model.GDeviceTypeSearchResults results = 1;
}
	
// Request for deleting a device type.
message GDeleteDeviceTypeRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a device type.
message GDeleteDeviceTypeResponse {
	com.sitewhere.grpc.model.GDeviceType deviceType = 1;
}

// #######################
// ### DEVICE COMMANDS ###
// #######################
	
// Request for creating a device command.
message GCreateDeviceCommandRequest {
	com.sitewhere.grpc.model.GDeviceCommandCreateRequest request = 1;
}

// Response from creating a device command.
message GCreateDeviceCommandResponse {
	com.sitewhere.grpc.model.GDeviceCommand command = 1;
}

// Request for getting a device command by id.
message GGetDeviceCommandRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a device command by id.
message GGetDeviceCommandResponse {
	com.sitewhere.grpc.model.GDeviceCommand command = 1;
}

// Request for getting a device command by token.
message GGetDeviceCommandByTokenRequest {
	com.sitewhere.grpc.model.GUUID deviceTypeId = 1;
	string token = 2;
}
	
// Response for getting a device command by token.
message GGetDeviceCommandByTokenResponse {
	com.sitewhere.grpc.model.GDeviceCommand command = 1;
}
	
// Request for updating an existing device command.
message GUpdateDeviceCommandRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GDeviceCommandCreateRequest request = 2;
}
	
// Response for updating an existing device command.
message GUpdateDeviceCommandResponse {
	com.sitewhere.grpc.model.GDeviceCommand command = 1;
}
	
// Request for listing device commands that meet criteria.
message GListDeviceCommandsRequest {
	com.sitewhere.grpc.model.GDeviceCommandSearchCriteria criteria = 2;
}
	
// Response for listing device commands that meet criteria.
message GListDeviceCommandsResponse {
	com.sitewhere.grpc.model.GDeviceCommandSearchResults results = 1;
}
	
// Request for deleting a device command.
message GDeleteDeviceCommandRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a device command.
message GDeleteDeviceCommandResponse {
	com.sitewhere.grpc.model.GDeviceCommand command = 1;
}

// #######################
// ### DEVICE STATUSES ###
// #######################
	
// Request for creating a device status.
message GCreateDeviceStatusRequest {
	com.sitewhere.grpc.model.GDeviceStatusCreateRequest request = 2;
}

// Response from creating a device status.
message GCreateDeviceStatusResponse {
	com.sitewhere.grpc.model.GDeviceStatus status = 1;
}

// Request for getting a device status by id.
message GGetDeviceStatusRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a device status by id.
message GGetDeviceStatusResponse {
	com.sitewhere.grpc.model.GDeviceStatus status = 1;
}

// Request for getting a device status by token.
message GGetDeviceStatusByTokenRequest {
	com.sitewhere.grpc.model.GUUID deviceTypeId = 1;
	string token = 2;
}
	
// Response for getting a device status by token.
message GGetDeviceStatusByTokenResponse {
	com.sitewhere.grpc.model.GDeviceStatus status = 1;
}
	
// Request for updating an existing device status.
message GUpdateDeviceStatusRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GDeviceStatusCreateRequest request = 2;
}
	
// Response for updating an existing device status.
message GUpdateDeviceStatusResponse {
	com.sitewhere.grpc.model.GDeviceStatus status = 1;
}
	
// Request for listing device statuses that meet criteria.
message GListDeviceStatusesRequest {
	com.sitewhere.grpc.model.GDeviceStatusSearchCriteria criteria = 2;
}
	
// Response for listing device statuses that meet criteria.
message GListDeviceStatusesResponse {
	com.sitewhere.grpc.model.GDeviceStatusSearchResults results = 1;
}
	
// Request for deleting a device status.
message GDeleteDeviceStatusRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a device status.
message GDeleteDeviceStatusResponse {
	com.sitewhere.grpc.model.GDeviceStatus status = 1;
}

// ###############
// ### DEVICES ###
// ###############
	
// Request for creating a device.
message GCreateDeviceRequest {
	com.sitewhere.grpc.model.GDeviceCreateRequest request = 1;
}

// Response from creating a device.
message GCreateDeviceResponse {
	com.sitewhere.grpc.model.GDevice device = 1;
}
		
// Request for getting a device id.
message GGetDeviceRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a device id.
message GGetDeviceResponse {
	com.sitewhere.grpc.model.GDevice device = 1;
}
	
// Request for getting a device by token.
message GGetDeviceByTokenRequest {
	string token = 1;
}
	
// Response for getting a device by token.
message GGetDeviceByTokenResponse {
	com.sitewhere.grpc.model.GDevice device = 1;
}
	
// Request for updating an existing device.
message GUpdateDeviceRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GDeviceCreateRequest request = 2;
}
	
// Response for updating an existing device.
message GUpdateDeviceResponse {
	com.sitewhere.grpc.model.GDevice device = 1;
}
	
// Request for listing devices that meet criteria.
message GListDevicesRequest {
	com.sitewhere.grpc.model.GDeviceSearchCriteria criteria = 1;
}
	
// Response for listing devices that meet criteria.
message GListDevicesResponse {
	com.sitewhere.grpc.model.GDeviceSearchResults results = 1;
}
		
// Request for getting summaries for devices that meet criteria.
message GListDeviceSummariesRequest {
	com.sitewhere.grpc.model.GDeviceSearchCriteria criteria = 1;
}
	
// Response for getting summaries for devices that meet criteria.
message GListDeviceSummariesResponse {
	com.sitewhere.grpc.model.GDeviceSummarySearchResults results = 1;
}
	
// Request for creating a device element mapping.
message GCreateDeviceElementMappingRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GDeviceElementMapping mapping = 2;
}
	
// Response for creating a device element mapping.
message GCreateDeviceElementMappingResponse {
	com.sitewhere.grpc.model.GDevice device = 1;
}
	
// Request for creating a device element mapping.
message GDeleteDeviceElementMappingRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	string path = 2;
}
	
// Response for creating a device element mapping.
message GDeleteDeviceElementMappingResponse {
	com.sitewhere.grpc.model.GDevice device = 1;
}
	
// Request for deleting a device.
message GDeleteDeviceRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a device.
message GDeleteDeviceResponse {
	com.sitewhere.grpc.model.GDevice device = 1;
}

// ##########################
// ### DEVICE ASSIGNMENTS ###
// ##########################
	
// Request for creating a device assignment.
message GCreateDeviceAssignmentRequest {
	com.sitewhere.grpc.model.GDeviceAssignmentCreateRequest request = 1;
}

// Response from creating a device assignment.
message GCreateDeviceAssignmentResponse {
	com.sitewhere.grpc.model.GDeviceAssignment assignment = 1;
}
	
// Request for getting a device assignment by id.
message GGetDeviceAssignmentRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a device assignment by id.
message GGetDeviceAssignmentResponse {
	com.sitewhere.grpc.model.GDeviceAssignment assignment = 1;
}
	
// Request for getting a device assignment by token.
message GGetDeviceAssignmentByTokenRequest {
	string token = 1;
}
	
// Response for getting a device assignment by token.
message GGetDeviceAssignmentByTokenResponse {
	com.sitewhere.grpc.model.GDeviceAssignment assignment = 1;
}
	
// Request for getting the active assignments for a device.
message GGetActiveAssignmentsForDeviceRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
		
// Response for getting the active assignments for a device.
message GGetActiveAssignmentsForDeviceResponse {
	repeated com.sitewhere.grpc.model.GDeviceAssignment assignment = 1;
}
	
// Request for deleting a device assignment.
message GDeleteDeviceAssignmentRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a device assignment.
message GDeleteDeviceAssignmentResponse {
	com.sitewhere.grpc.model.GDeviceAssignment assignment = 1;
}
	
// Request for updating an existing device assignment.
message GUpdateDeviceAssignmentRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GDeviceAssignmentCreateRequest request = 2;
}
	
// Response for updating an existing device assignment.
message GUpdateDeviceAssignmentResponse {
	com.sitewhere.grpc.model.GDeviceAssignment assignment = 1;
}
	
// Request for listing device assignments that match criteria.
message GListDeviceAssignmentsRequest {
	com.sitewhere.grpc.model.GDeviceAssignmentSearchCriteria criteria = 1;
}
	
// Response for listing device assignments that match criteria.
message GListDeviceAssignmentsResponse {
	com.sitewhere.grpc.model.GDeviceAssignmentSearchResults results = 1;
}
	
// Request for ending a device assignment.
message GEndDeviceAssignmentRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for ending a device assignment.
message GEndDeviceAssignmentResponse {
	com.sitewhere.grpc.model.GDeviceAssignment assignment = 1;
}

// #####################
// ### DEVICE GROUPS ###
// #####################

// Request for creating a device group.
message GCreateDeviceGroupRequest {
	com.sitewhere.grpc.model.GDeviceGroupCreateRequest request = 1;
}

// Response from creating a device group.
message GCreateDeviceGroupResponse {
	com.sitewhere.grpc.model.GDeviceGroup group = 1;
}
		
// Request for getting a device group by id.
message GGetDeviceGroupRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a device group by id.
message GGetDeviceGroupResponse {
	com.sitewhere.grpc.model.GDeviceGroup group = 1;
}
	
// Request for getting a device group by token.
message GGetDeviceGroupByTokenRequest {
	string token = 1;
}
	
// Response for getting a device group by token.
message GGetDeviceGroupByTokenResponse {
	com.sitewhere.grpc.model.GDeviceGroup group = 1;
}
	
// Request for updating an existing device group.
message GUpdateDeviceGroupRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GDeviceGroupCreateRequest request = 2;
}
	
// Response for updating an existing device group.
message GUpdateDeviceGroupResponse {
	com.sitewhere.grpc.model.GDeviceGroup group = 1;
}
	
// Request for listing device groups that meet criteria.
message GListDeviceGroupsRequest {
	com.sitewhere.grpc.model.GDeviceGroupSearchCriteria criteria = 1;
}
	
// Response for listing device groups that meet criteria.
message GListDeviceGroupsResponse {
	com.sitewhere.grpc.model.GDeviceGroupSearchResults results = 1;
}
	
// Request for listing device groups with a role that meet criteria.
message GListDeviceGroupsWithRoleRequest {
	com.sitewhere.grpc.model.GDeviceGroupsWithRoleSearchCriteria criteria = 1;
}
	
// Response for listing device groups with a role that meet criteria.
message GListDeviceGroupsWithRoleResponse {
	com.sitewhere.grpc.model.GDeviceGroupSearchResults results = 1;
}
	
// Request for deleting a device group.
message GDeleteDeviceGroupRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a device group.
message GDeleteDeviceGroupResponse {
	com.sitewhere.grpc.model.GDeviceGroup group = 1;
}
	
// Request for adding device group elements.
message GAddDeviceGroupElementsRequest {
	com.sitewhere.grpc.model.GUUID groupId = 1;
	repeated com.sitewhere.grpc.model.GDeviceGroupElementCreateRequest requests = 2;
	bool ignoreDuplicates = 3;
}
	
// Response for adding device group elements.
message GAddDeviceGroupElementsResponse {
	repeated com.sitewhere.grpc.model.GDeviceGroupElement elements = 1;
}
	
// Request for removing device group elements.
message GRemoveDeviceGroupElementsRequest {
	repeated com.sitewhere.grpc.model.GUUID elementIds = 1;
}
	
// Response for removing device group elements.
message GRemoveDeviceGroupElementsResponse {
	repeated com.sitewhere.grpc.model.GDeviceGroupElement elements = 1;
}
	
// Request for listing device group elements.
message GListDeviceGroupElementsRequest {
	com.sitewhere.grpc.model.GUUID groupId = 1;
	com.sitewhere.grpc.model.GDeviceGroupElementsSearchCriteria criteria = 2;
}
	
// Response for listing device group elements.
message GListDeviceGroupElementsResponse {
	com.sitewhere.grpc.model.GDeviceGroupElementsSearchResults results = 1;
}

// #####################
// ### DEVICE ALARMS ###
// #####################

// Request for creating a device alarm.
message GCreateDeviceAlarmRequest {
	com.sitewhere.grpc.model.GDeviceAlarmCreateRequest request = 1;
}

// Response from creating a device alarm.
message GCreateDeviceAlarmResponse {
	com.sitewhere.grpc.model.GDeviceAlarm alarm = 1;
}
		
// Request for getting a device alarm by id.
message GGetDeviceAlarmRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for getting a device alarm by id.
message GGetDeviceAlarmResponse {
	com.sitewhere.grpc.model.GDeviceAlarm alarm = 1;
}
	
// Request for updating an existing device alarm.
message GUpdateDeviceAlarmRequest {
	com.sitewhere.grpc.model.GUUID alarmId = 1;
	com.sitewhere.grpc.model.GDeviceAlarmCreateRequest request = 2;
}
	
// Response for updating an existing device alarm.
message GUpdateDeviceAlarmResponse {
	com.sitewhere.grpc.model.GDeviceAlarm alarm = 1;
}
	
// Request for searching for device alarms that meet criteria.
message GSearchDeviceAlarmsRequest {
	com.sitewhere.grpc.model.GDeviceAlarmSearchCriteria criteria = 1;
}
	
// Response for searching for device alarms that meet criteria.
message GSearchDeviceAlarmsResponse {
	com.sitewhere.grpc.model.GDeviceAlarmSearchResults results = 1;
}
	
// Request for deleting a device alarm.
message GDeleteDeviceAlarmRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}
	
// Response for deleting a device alarm.
message GDeleteDeviceAlarmResponse {
	com.sitewhere.grpc.model.GDeviceAlarm alarm = 1;
}
